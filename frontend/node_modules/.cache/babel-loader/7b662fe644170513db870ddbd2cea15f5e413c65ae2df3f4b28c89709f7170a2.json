{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[messages,setMessages]=useState([]);const[input,setInput]=useState('');const[isLoading,setIsLoading]=useState(false);const[apiConnected,setApiConnected]=useState(false);// Use environment variable with fallback\nconst API_URL=process.env.REACT_APP_API_URL||'https://ai-medical-chatbot-using-rag.onrender.com';// Log the API URL being used (helpful for debugging)\nconsole.log('Using API URL:',API_URL);// Check API connection on component mount\nuseEffect(()=>{const checkApi=async()=>{try{const response=await axios.get(API_URL);console.log('API connection check:',response.data);setApiConnected(true);}catch(error){console.error('API connection failed:',error);setApiConnected(false);}};checkApi();},[API_URL]);const handleSendMessage=async e=>{e.preventDefault();if(!input.trim())return;// Add user message to the chat\nconst userMessage={text:input,sender:'user'};setMessages([...messages,userMessage]);setInput('');setIsLoading(true);try{// Use the chat endpoint for real responses\nconst response=await axios.post(`${API_URL}/chat`,{message:input});// Add bot response to the chat\nsetMessages(prevMessages=>[...prevMessages,{text:response.data.message,sender:'bot'}]);}catch(error){console.error('Error sending message:',error);setMessages(prevMessages=>[...prevMessages,{text:'Sorry, there was an error processing your request.',sender:'bot'}]);}finally{setIsLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"app-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Medical Knowledge Chatbot\"}),apiConnected?/*#__PURE__*/_jsx(\"span\",{className:\"api-status connected\",children:\"API Connected\"}):/*#__PURE__*/_jsx(\"span\",{className:\"api-status disconnected\",children:\"API Disconnected\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"messages-container\",children:[messages.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"welcome-message\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Welcome to the Medical Knowledge Chatbot\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Ask any medical question to get started.\"}),!apiConnected&&/*#__PURE__*/_jsx(\"p\",{className:\"api-warning\",children:\"Warning: The API is not connected. Your messages will not be processed.\"})]}):messages.map((message,index)=>/*#__PURE__*/_jsx(\"div\",{className:`message ${message.sender}`,children:/*#__PURE__*/_jsx(\"div\",{className:\"message-content\",children:message.text})},index)),isLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"message bot loading\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-dots\",children:[/*#__PURE__*/_jsx(\"span\",{children:\".\"}),/*#__PURE__*/_jsx(\"span\",{children:\".\"}),/*#__PURE__*/_jsx(\"span\",{children:\".\"})]})})]}),/*#__PURE__*/_jsxs(\"form\",{className:\"input-container\",onSubmit:handleSendMessage,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:input,onChange:e=>setInput(e.target.value),placeholder:\"Type your medical question here...\",disabled:isLoading||!apiConnected}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:isLoading||!input.trim()||!apiConnected,children:\"Send\"})]})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","App","messages","setMessages","input","setInput","isLoading","setIsLoading","apiConnected","setApiConnected","API_URL","process","env","REACT_APP_API_URL","console","log","checkApi","response","get","data","error","handleSendMessage","e","preventDefault","trim","userMessage","text","sender","post","message","prevMessages","className","children","length","map","index","onSubmit","type","value","onChange","target","placeholder","disabled"],"sources":["C:/Users/yudong/AI-Medical-Chatbot-using-RAG/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [apiConnected, setApiConnected] = useState(false);\r\n\r\n  // Use environment variable with fallback\r\n  const API_URL = process.env.REACT_APP_API_URL || 'https://ai-medical-chatbot-using-rag.onrender.com';\r\n  \r\n  // Log the API URL being used (helpful for debugging)\r\n  console.log('Using API URL:', API_URL);\r\n\r\n  // Check API connection on component mount\r\n  useEffect(() => {\r\n    const checkApi = async () => {\r\n      try {\r\n        const response = await axios.get(API_URL);\r\n        console.log('API connection check:', response.data);\r\n        setApiConnected(true);\r\n      } catch (error) {\r\n        console.error('API connection failed:', error);\r\n        setApiConnected(false);\r\n      }\r\n    };\r\n    \r\n    checkApi();\r\n  }, [API_URL]);\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!input.trim()) return;\r\n\r\n    // Add user message to the chat\r\n    const userMessage = { text: input, sender: 'user' };\r\n    setMessages([...messages, userMessage]);\r\n    setInput('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Use the chat endpoint for real responses\r\n      const response = await axios.post(`${API_URL}/chat`, {\r\n        message: input\r\n      });\r\n\r\n      // Add bot response to the chat\r\n      setMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { text: response.data.message, sender: 'bot' }\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      setMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { text: 'Sorry, there was an error processing your request.', sender: 'bot' }\r\n      ]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"app-header\">\r\n        <h1>Medical Knowledge Chatbot</h1>\r\n        {apiConnected ? (\r\n          <span className=\"api-status connected\">API Connected</span>\r\n        ) : (\r\n          <span className=\"api-status disconnected\">API Disconnected</span>\r\n        )}\r\n      </header>\r\n      <div className=\"chat-container\">\r\n        <div className=\"messages-container\">\r\n          {messages.length === 0 ? (\r\n            <div className=\"welcome-message\">\r\n              <h2>Welcome to the Medical Knowledge Chatbot</h2>\r\n              <p>Ask any medical question to get started.</p>\r\n              {!apiConnected && (\r\n                <p className=\"api-warning\">Warning: The API is not connected. Your messages will not be processed.</p>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            messages.map((message, index) => (\r\n              <div key={index} className={`message ${message.sender}`}>\r\n                <div className=\"message-content\">{message.text}</div>\r\n              </div>\r\n            ))\r\n          )}\r\n          {isLoading && (\r\n            <div className=\"message bot loading\">\r\n              <div className=\"loading-dots\">\r\n                <span>.</span><span>.</span><span>.</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <form className=\"input-container\" onSubmit={handleSendMessage}>\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder=\"Type your medical question here...\"\r\n            disabled={isLoading || !apiConnected}\r\n          />\r\n          <button type=\"submit\" disabled={isLoading || !input.trim() || !apiConnected}>\r\n            Send\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}